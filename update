"use client";
import React from "react";

function MainComponent() {
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState("");
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [selectedColor, setSelectedColor] = useState("#ff4b5c");
  const [currentDate, setCurrentDate] = useState(new Date());
  const [isWeekView, setIsWeekView] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  const [settingsOpen, setSettingsOpen] = useState(false);
  const [hideCompleted, setHideCompleted] = useState(false);
  const [editingDate, setEditingDate] = useState(null);

  useEffect(() => {
    const savedDarkMode = localStorage.getItem("darkMode") === "true";
    const savedHideCompleted = localStorage.getItem("hideCompleted") === "true";
    setDarkMode(savedDarkMode);
    setHideCompleted(savedHideCompleted);
    document.documentElement.setAttribute(
      "data-theme",
      savedDarkMode ? "dark" : "light"
    );
  }, []);

  const toggleDarkMode = () => {
    const newDarkMode = !darkMode;
    setDarkMode(newDarkMode);
    localStorage.setItem("darkMode", newDarkMode);
    document.documentElement.setAttribute(
      "data-theme",
      newDarkMode ? "dark" : "light"
    );
  };
  const toggleHideCompleted = () => {
    const newHideCompleted = !hideCompleted;
    setHideCompleted(newHideCompleted);
    localStorage.setItem("hideCompleted", newHideCompleted);
  };
  const colors = [
    "#ff4b5c",
    "#00bcd4",
    "#4caf50",
    "#ff9800",
    "#9c27b0",
    "#3f51b5",
  ];
  const formatDate = (date) => {
    return date.toLocaleDateString("default", {
      month: "short",
      day: "numeric",
    });
  };
  const isToday = (date) => {
    return new Date().toDateString() === date.toDateString();
  };
  const isTomorrow = (date) => {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    return tomorrow.toDateString() === date.toDateString();
  };
  const isOverdue = (date) => {
    return date < new Date().setHours(0, 0, 0, 0);
  };
  const groupTasks = (tasks) => {
    const grouped = {
      overdue: [],
      today: [],
      tomorrow: [],
      future: [],
    };

    tasks.forEach((task) => {
      if (isOverdue(task.date)) grouped.overdue.push(task);
      else if (isToday(task.date)) grouped.today.push(task);
      else if (isTomorrow(task.date)) grouped.tomorrow.push(task);
      else grouped.future.push(task);
    });

    return grouped;
  };
  const addTask = () => {
    if (newTask.trim()) {
      setTasks([
        ...tasks,
        {
          id: Date.now(),
          text: newTask,
          date: selectedDate,
          color: selectedColor,
          completed: false,
        },
      ]);
      setNewTask("");
    }
  };
  const toggleTaskCompletion = (taskId) => {
    setTasks(
      tasks.map((task) =>
        task.id === taskId ? { ...task, completed: !task.completed } : task
      )
    );
  };
  const deleteTask = (taskId) => {
    setTasks(tasks.filter((task) => task.id !== taskId));
  };
  const updateTaskDate = (taskId, newDate) => {
    setTasks(
      tasks.map((task) =>
        task.id === taskId ? { ...task, date: new Date(newDate) } : task
      )
    );
    setEditingDate(null);
  };
  const navigateWeek = (direction) => {
    const newDate = new Date(currentDate);
    newDate.setDate(currentDate.getDate() + direction * 7);
    setCurrentDate(newDate);
  };
  const navigateMonth = (direction) => {
    const newDate = new Date(currentDate);
    newDate.setMonth(currentDate.getMonth() + direction);
    setCurrentDate(newDate);
  };
  const getDaysInMonth = (date) => {
    const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);
    const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);
    const days = [];

    for (let i = 0; i < firstDay.getDay(); i++) {
      days.push(null);
    }

    for (let i = 1; i <= lastDay.getDate(); i++) {
      days.push(new Date(date.getFullYear(), date.getMonth(), i));
    }

    return days;
  };
  const getTasksForDate = (date) => {
    let filteredTasks = tasks.filter(
      (task) => task.date.toDateString() === date.toDateString()
    );
    if (hideCompleted) {
      filteredTasks = filteredTasks.filter((task) => !task.completed);
    }
    return filteredTasks;
  };
  const getWeekRange = (date) => {
    const start = new Date(date);
    start.setDate(start.getDate() - start.getDay());
    const end = new Date(start);
    end.setDate(end.getDate() + 6);
    return `${formatDate(start)} - ${formatDate(end)}`;
  };

  return (
    <div
      className="min-h-screen transition-colors duration-300"
      style={{ backgroundColor: "var(--bg-primary)" }}
    >
      <button
        onClick={() => setSettingsOpen(true)}
        className="fixed top-6 right-6 text-2xl transition-colors duration-300"
        style={{ color: "var(--text-primary)" }}
      >
        <i className="fas fa-cog" />
      </button>
      <div
        className={`fixed inset-y-0 right-0 w-80 transition-transform duration-300 transform ${
          settingsOpen ? "translate-x-0" : "translate-x-full"
        }`}
        style={{ backgroundColor: "var(--bg-secondary)" }}
      >
        <div className="p-6">
          <div className="flex justify-between items-center mb-6">
            <h2
              className="text-xl font-bold"
              style={{ color: "var(--text-primary)" }}
            >
              Settings
            </h2>
            <button
              onClick={() => setSettingsOpen(false)}
              style={{ color: "var(--text-primary)" }}
            >
              <i className="fas fa-times" />
            </button>
          </div>
          <div className="flex flex-col gap-4">
            <div className="flex items-center justify-between">
              <span style={{ color: "var(--text-primary)" }}>Dark Mode</span>
              <button
                onClick={toggleDarkMode}
                className="text-xl"
                style={{ color: "var(--text-primary)" }}
              >
                <i className={`fas ${darkMode ? "fa-sun" : "fa-moon"}`} />
              </button>
            </div>
            <div className="flex items-center justify-between">
              <span style={{ color: "var(--text-primary)" }}>
                Hide Completed Tasks
              </span>
              <button
                onClick={toggleHideCompleted}
                className="text-xl"
                style={{ color: "var(--text-primary)" }}
              >
                <i
                  className={`fas ${hideCompleted ? "fa-eye-slash" : "fa-eye"}`}
                />
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="p-6 max-w-7xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="md:col-span-1">
          <div
            className="rounded-lg shadow-lg p-6 transition-colors duration-300"
            style={{
              backgroundColor: "var(--bg-secondary)",
              color: "var(--text-primary)",
            }}
          >
            <h2 className="text-2xl font-bold mb-4">Task Manager</h2>

            <input
              type="text"
              value={newTask}
              onChange={(e) => setNewTask(e.target.value)}
              className="w-full p-2 border rounded mb-4 transition-colors duration-300"
              style={{
                backgroundColor: "var(--input-bg)",
                color: "var(--text-primary)",
                borderColor: "var(--border-color)",
              }}
              placeholder="New task..."
            />

            <input
              type="date"
              onChange={(e) => setSelectedDate(new Date(e.target.value))}
              defaultValue={new Date().toISOString().split("T")[0]}
              className="w-full p-2 border rounded mb-4 transition-colors duration-300"
              style={{
                backgroundColor: "var(--input-bg)",
                color: "var(--text-primary)",
                borderColor: "var(--border-color)",
              }}
            />

            <div className="flex gap-2 mb-4">
              {colors.map((color) => (
                <button
                  key={color}
                  onClick={() => setSelectedColor(color)}
                  className={`w-8 h-8 rounded-full ${
                    selectedColor === color
                      ? "ring-2 ring-offset-2 ring-gray-400"
                      : ""
                  }`}
                  style={{
                    backgroundColor: color,
                    opacity: darkMode ? 0.8 : 1,
                  }}
                />
              ))}
            </div>

            <button
              onClick={addTask}
              className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 transition-colors duration-300"
            >
              Add Task
            </button>

            <div className="mt-6 space-y-4">
              {Object.entries(
                groupTasks(
                  tasks.filter((task) => !hideCompleted || !task.completed)
                )
              ).map(
                ([group, groupTasks]) =>
                  groupTasks.length > 0 && (
                    <div key={group} className="space-y-2">
                      <h3
                        className="font-bold capitalize"
                        style={{
                          color:
                            group === "overdue"
                              ? "#ff4b5c"
                              : "var(--text-primary)",
                        }}
                      >
                        {group}
                      </h3>
                      {groupTasks.map((task) => (
                        <div
                          key={task.id}
                          className="flex items-center justify-between p-3 rounded transition-colors duration-300"
                          style={{
                            backgroundColor: "var(--input-bg)",
                            color: "var(--text-primary)",
                            opacity: task.completed ? 0.6 : 1,
                            borderLeft:
                              group === "overdue"
                                ? "4px solid #ff4b5c"
                                : "none",
                          }}
                        >
                          <div className="flex items-center gap-3">
                            <button
                              onClick={() => toggleTaskCompletion(task.id)}
                              className="w-5 h-5 border-2 rounded flex items-center justify-center"
                              style={{ borderColor: task.color }}
                            >
                              {task.completed && (
                                <i
                                  className="fas fa-check"
                                  style={{ color: task.color }}
                                />
                              )}
                            </button>
                            <div
                              className="w-4 h-4 rounded-full"
                              style={{
                                backgroundColor: task.color,
                                opacity: darkMode ? 0.8 : 1,
                              }}
                            />
                            <div className="flex flex-col">
                              <span
                                className={task.completed ? "line-through" : ""}
                              >
                                {task.text}
                              </span>
                              <div className="flex items-center gap-2">
                                <span className="text-sm opacity-60">
                                  {formatDate(task.date)}
                                </span>
                                {editingDate === task.id ? (
                                  <input
                                    type="date"
                                    defaultValue={
                                      task.date.toISOString().split("T")[0]
                                    }
                                    onChange={(e) =>
                                      updateTaskDate(task.id, e.target.value)
                                    }
                                    onBlur={() => setEditingDate(null)}
                                    className="text-sm p-1 rounded border transition-colors duration-300"
                                    style={{
                                      backgroundColor: "var(--input-bg)",
                                      color: "var(--text-primary)",
                                      borderColor: "var(--border-color)",
                                    }}
                                    autoFocus
                                  />
                                ) : (
                                  <button
                                    onClick={() => setEditingDate(task.id)}
                                    className="text-sm opacity-60 hover:opacity-100 transition-opacity duration-300"
                                  >
                                    <i className="fas fa-calendar-alt" />
                                  </button>
                                )}
                              </div>
                            </div>
                          </div>
                          <button
                            onClick={() => deleteTask(task.id)}
                            className="text-red-500 hover:text-red-700"
                          >
                            <i className="fas fa-trash" />
                          </button>
                        </div>
                      ))}
                    </div>
                  )
              )}
            </div>
          </div>
        </div>

        <div className="md:col-span-2">
          <div
            className="rounded-lg shadow-lg p-6 transition-colors duration-300"
            style={{
              backgroundColor: "var(--bg-secondary)",
              color: "var(--text-primary)",
              borderColor: "var(--border-color)",
            }}
          >
            <div className="flex justify-between items-center mb-6">
              <div className="flex gap-4 items-center">
                <button
                  onClick={() =>
                    isWeekView ? navigateWeek(-1) : navigateMonth(-1)
                  }
                  className="transition-colors duration-300"
                  style={{ color: "var(--text-secondary)" }}
                >
                  <i className="fas fa-chevron-left" />
                </button>
                <h2
                  className="text-xl font-bold"
                  style={{ color: "var(--text-primary)" }}
                >
                  {isWeekView
                    ? getWeekRange(currentDate)
                    : currentDate.toLocaleString("default", {
                        month: "long",
                        year: "numeric",
                      })}
                </h2>
                <button
                  onClick={() =>
                    isWeekView ? navigateWeek(1) : navigateMonth(1)
                  }
                  className="transition-colors duration-300"
                  style={{ color: "var(--text-secondary)" }}
                >
                  <i className="fas fa-chevron-right" />
                </button>
              </div>
              <button
                onClick={() => setIsWeekView(!isWeekView)}
                className="px-4 py-2 rounded transition-colors duration-300"
                style={{
                  backgroundColor: "var(--input-bg)",
                  color: "var(--text-primary)",
                }}
              >
                {isWeekView ? "Month View" : "Week View"}
              </button>
            </div>

            {isWeekView ? (
              <div className="grid grid-cols-7 gap-2 min-h-[600px]">
                {[...Array.from({ length: 7 })].map((_, index) => {
                  const date = new Date(currentDate);
                  date.setDate(date.getDate() - date.getDay() + index);
                  const dayTasks = getTasksForDate(date);
                  const isCurrentDay = isToday(date);

                  return (
                    <div
                      key={index}
                      className={`border-r last:border-r-0 p-2 transition-colors duration-300 ${
                        isCurrentDay ? "bg-blue-50 dark:bg-blue-900/20" : ""
                      }`}
                      style={{ borderColor: "var(--border-color)" }}
                    >
                      <div className="text-center p-2 sticky top-0 bg-inherit">
                        <div
                          className="font-bold"
                          style={{
                            color: isCurrentDay
                              ? "var(--accent-color)"
                              : "var(--text-primary)",
                          }}
                        >
                          {date.toLocaleDateString("default", {
                            weekday: "short",
                          })}
                        </div>
                        <div className="text-sm opacity-75">
                          {date.toLocaleDateString("default", {
                            month: "short",
                            day: "numeric",
                          })}
                        </div>
                      </div>
                      <div className="space-y-2">
                        {dayTasks.map((task) => (
                          <div
                            key={task.id}
                            className="p-2 rounded cursor-pointer hover:ring-2 transition-all duration-300"
                            style={{
                              backgroundColor: `${task.color}20`,
                              borderLeft: `4px solid ${task.color}`,
                              opacity: task.completed ? 0.6 : 1,
                              color: "var(--text-primary)",
                            }}
                          >
                            <div className="flex items-center gap-2">
                              <button
                                onClick={() => toggleTaskCompletion(task.id)}
                                className="w-4 h-4 border-2 rounded flex items-center justify-center shrink-0"
                                style={{ borderColor: task.color }}
                              >
                                {task.completed && (
                                  <i
                                    className="fas fa-check text-xs"
                                    style={{ color: task.color }}
                                  />
                                )}
                              </button>
                              <span
                                className={`text-sm ${
                                  task.completed ? "line-through" : ""
                                }`}
                              >
                                {task.text}
                              </span>
                            </div>
                            <div className="flex items-center justify-between mt-1">
                              <div className="flex items-center gap-2">
                                {editingDate === task.id ? (
                                  <input
                                    type="date"
                                    defaultValue={
                                      task.date.toISOString().split("T")[0]
                                    }
                                    onChange={(e) =>
                                      updateTaskDate(task.id, e.target.value)
                                    }
                                    onBlur={() => setEditingDate(null)}
                                    className="text-xs p-1 rounded border transition-colors duration-300"
                                    style={{
                                      backgroundColor: "var(--input-bg)",
                                      color: "var(--text-primary)",
                                      borderColor: "var(--border-color)",
                                    }}
                                    autoFocus
                                  />
                                ) : (
                                  <button
                                    onClick={() => setEditingDate(task.id)}
                                    className="text-xs opacity-60 hover:opacity-100 transition-opacity duration-300"
                                  >
                                    <i className="fas fa-calendar-alt" />
                                  </button>
                                )}
                              </div>
                              <button
                                onClick={() => deleteTask(task.id)}
                                className="text-xs text-red-500 hover:text-red-700"
                              >
                                <i className="fas fa-trash" />
                              </button>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  );
                })}
              </div>
            ) : (
              <div className="grid grid-cols-7 gap-2">
                {["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"].map(
                  (day) => (
                    <div
                      key={day}
                      className="text-center font-bold py-2"
                      style={{ color: "var(--text-primary)" }}
                    >
                      {day}
                    </div>
                  )
                )}

                {getDaysInMonth(currentDate).map((date, index) => (
                  <div
                    key={index}
                    className="h-24 p-2 rounded transition-colors duration-300"
                    style={{
                      backgroundColor: date
                        ? "var(--input-bg)"
                        : "var(--bg-secondary)",
                      color: "var(--text-primary)",
                      borderColor: "var(--border-color)",
                    }}
                  >
                    {date && (
                      <>
                        <div className="font-bold">{date.getDate()}</div>
                        <div className="flex flex-wrap gap-1">
                          {getTasksForDate(date).map((task) => (
                            <div
                              key={task.id}
                              className="w-4 h-4 rounded-full transition-opacity duration-300"
                              style={{
                                backgroundColor: task.color,
                                opacity: task.completed
                                  ? 0.4
                                  : darkMode
                                  ? 0.8
                                  : 1,
                              }}
                            />
                          ))}
                        </div>
                      </>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      <style jsx global>{`
  :root {
    --bg-primary: #f4f4f9;
    --bg-secondary: #ffffff;
    --text-primary: #000000;
    --text-secondary: #666666;
    --border-color: #ddd;
    --input-bg: #ffffff;
    --accent-color: #3b82f6;
    --error-color: #ef4444;
    --success-color: #22c55e;
  }

  [data-theme="dark"] {
    --bg-primary: #1a1a1a;
    --bg-secondary: #2d2d2d;
    --text-primary: #ffffff;
    --text-secondary: #cccccc;
    --border-color: #404040;
    --input-bg: #363636;
    --accent-color: #60a5fa;
    --error-color: #f87171;
    --success-color: #4ade80;
  }

  * {
    transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease, opacity 0.3s ease;
  }
`}</style>
    </div>
  );
}

export default MainComponent;
